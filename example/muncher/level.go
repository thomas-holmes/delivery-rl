package main

type TileKind int

const (
	Wall TileKind = iota
	Floor
	UpStair
	DownStair
)
const (
	WallGlyph      = '#'
	FloorGlyph     = '.'
	UpStairGlyph   = '<'
	DownStairGlyph = '>'
)

type LevelTile struct {
	X int
	Y int
	TileKind
}

type Level struct {
	Columns int
	Rows    int
	tiles   []LevelTile
}

func loadFromString(levelString string) Level {
	level := Level{}

	tiles := make([]LevelTile, 0, len(levelString))

	r, c := 0, 0
	for _, s := range levelString {
		if s == '\n' {
			r++
			c = 0
			continue
		}
		t := LevelTile{
			X: c,
			Y: r,
		}
		switch s {
		case WallGlyph:
			t.TileKind = Wall
		case FloorGlyph:
			t.TileKind = Floor
		case UpStairGlyph:
			t.TileKind = UpStair
		case DownStairGlyph:
			t.TileKind = DownStair
		}

		tiles = append(tiles, t)
		c++
	}
	level.Columns = c
	level.Rows = r + 1
	level.tiles = tiles

	return level
}

// TODO: Start generating levels soon instead of using a hard coded grid :)
var LevelMask1 = "" + // Make gofmt happy
	"########################################\n" +
	"#...................#....#...#.........#\n" +
	"#.............#####.#......#.#.........#\n" +
	"#...#.........#...#.#....###.#.........#\n" +
	"#.............#...#.#....###.#.........#\n" +
	"#.............#...#.#....###.#.........#\n" +
	"#.............#...#.#....#.............#\n" +
	"#.....>.......##.##.#....#.............#\n" +
	"#..............#.#..####.#.............#\n" +
	"#.....###......#.#.....#.#.............#\n" +
	"#.....###......#.#.....#.#....##.......#\n" +
	"#.....###......#.#.....#.#....##.......#\n" +
	"#.....###......#.#.....#.#.............#\n" +
	"#..............#.#.....#.#.............#\n" +
	"#..............#.#.....#.#..........####\n" +
	"#........#######.#######.#..........#..#\n" +
	"#........................#....>........#\n" +
	"########################################"

var LevelMask2 = "" + // Make gofmt happy
	"##############################################\n" +
	"#............................................#\n" +
	"#.............................<..............#\n" +
	"#............................................#\n" +
	"#............................................#\n" +
	"#............................................#\n" +
	"#............................................#\n" +
	"#............................................#\n" +
	"#............................................#\n" +
	"#............................................#\n" +
	"#............................................#\n" +
	"#............................................#\n" +
	"#............................................#\n" +
	"#............................................#\n" +
	"#.........<..................................#\n" +
	"#............................................#\n" +
	"##############################################"
